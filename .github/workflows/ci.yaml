name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        preset: [android, ios, linux-clang, linux-gcc, macos, windows]
        config: [Debug, Release]
        shared: [OFF, ON]
        lfs: [OFF, ON]
        include:
          - { os: macos-latest, preset: ios }
          - { os: macos-latest, preset: macos }
          - { os: ubuntu-latest, preset: android }
          - { os: ubuntu-latest, preset: linux-clang }
          - { os: ubuntu-latest, preset: linux-gcc }
          - { os: windows-latest, preset: windows }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .cpm
          key: zlib-1.3
          enableCrossOsArchive: true

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Generate cache.cmake
        run: |
          echo 'set(CPM_SOURCE_CACHE  ".cpm"               CACHE STRING "")' >> cache.cmake
          echo 'set(BUILD_SHARED_LIBS ${{ matrix.shared }} CACHE BOOL   "")' >> cache.cmake
          echo 'set(ZLIB_ENABLE_LFS   ${{ matrix.lfs }}    CACHE BOOL   "")' >> cache.cmake
      - name: Append to cache.cmake
        if: startsWith(matrix.preset, 'ios')
        run: echo 'set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED NO CACHE BOOL "")' >> cache.cmake

      - name: Configure CMake
        run: cmake --preset ${{ matrix.preset }} -C cache.cmake

      - name: Build
        run: cmake --build --preset ${{ matrix.preset }} --config ${{ matrix.config }}

      - name: Test
        if: contains(fromJSON('["linux-clang", "linux-gcc", "macos", "windows"]'), matrix.preset)
        run: ctest --preset ${{ matrix.preset }} -C ${{ matrix.config }}

      - name: Install
        run: cmake --build --preset ${{ matrix.preset }} --config ${{ matrix.config }} -t install
